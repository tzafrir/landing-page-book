"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var simpleComponentCodeExample = "\nclass HelloMessage extends React.Component {\n  render() {\n    return (\n      <div>\n        Hello {this.props.name}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <HelloMessage name=\"Taylor\" />,\n  mountNode\n);\n              ";

var statefulComponentCodeExample = "\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n\n  tick() {\n    this.setState(prevState => ({\n      seconds: prevState.seconds + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>\n        Seconds: {this.state.seconds}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Timer />, mountNode);\n              ";

var anApplicationCodeExample = "\nclass TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [], text: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>TODO</h3>\n        <TodoList items={this.state.items} />\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\">\n            What needs to be done?\n          </label>\n          <input\n            id=\"new-todo\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          <button>\n            Add #{this.state.items.length + 1}\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (!this.state.text.length) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(prevState => ({\n      items: prevState.items.concat(newItem),\n      text: ''\n    }));\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nReactDOM.render(<TodoApp />, mountNode);\n              ";
var aComponentUsingExternalPluginsCodeExample = "\n              class TodoApp extends React.Component {\n                constructor(props) {\n                  super(props);\n                  this.state = { items: [], text: '' };\n                  this.handleChange = this.handleChange.bind(this);\n                  this.handleSubmit = this.handleSubmit.bind(this);\n                }\n              \n                render() {\n                  return (\n                    <div>\n                      <h3>TODO</h3>\n                      <TodoList items={this.state.items} />\n                      <form onSubmit={this.handleSubmit}>\n                        <label htmlFor=\"new-todo\">\n                          What needs to be done?\n                        </label>\n                        <input\n                          id=\"new-todo\"\n                          onChange={this.handleChange}\n                          value={this.state.text}\n                        />\n                        <button>\n                          Add #{this.state.items.length + 1}\n                        </button>\n                      </form>\n                    </div>\n                  );\n                }\n              \n                handleChange(e) {\n                  this.setState({ text: e.target.value });\n                }\n              \n                handleSubmit(e) {\n                  e.preventDefault();\n                  if (!this.state.text.length) {\n                    return;\n                  }\n                  const newItem = {\n                    text: this.state.text,\n                    id: Date.now()\n                  };\n                  this.setState(prevState => ({\n                    items: prevState.items.concat(newItem),\n                    text: ''\n                  }));\n                }\n              }\n              \n              class TodoList extends React.Component {\n                render() {\n                  return (\n                    <ul>\n                      {this.props.items.map(item => (\n                        <li key={item.id}>{item.text}</li>\n                      ))}\n                    </ul>\n                  );\n                }\n              }\n              \n              ReactDOM.render(<TodoApp />, mountNode);\n                            ";

exports.simpleComponentCodeExample = simpleComponentCodeExample;
exports.statefulComponentCodeExample = statefulComponentCodeExample;
exports.anApplicationCodeExample = anApplicationCodeExample;
exports.aComponentUsingExternalPluginsCodeExample = aComponentUsingExternalPluginsCodeExample;